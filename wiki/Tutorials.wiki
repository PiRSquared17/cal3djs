#summary This document describes how to use Cal2DJS in your projects.

= Core Model Handling =

In Cal3DJS, every model instance is based on a core model, which therefore must be created first. All the shared data, such as animations, meshes and materials, need to be loaded, and a few additional steps are necessary to finish the setup of the material handling. 

== Creation ==

First of all, we need to create an instance of the Cal3D.CalCoreModel class. The constructor take a single argument as a description of the core model.
{{{
var myCoreModel = new Cal3D.CalCoreModel('myHero');
}}}

== Data Loading ==

The next step is to load the skeleton data. Note that there can be only one skeleton per core model and it should be loaded before any other type of data. Use the Cal3D.CalLoader.loadCoreSkeletonFromFile() function to do this by providing the URL of the skeleton file and a callback object to retrieve the loaded core model or some useful information in case that any error happened.
{{{
var skeletonCallback = {};

skeletonCallback.onload = function(coreSkeleton, url) {
    myCoreModel.setCoreSkeleton(coreSkeleton);
};

skeletonCallback.onerror = function(errorCode, url) {
    // error handling ...
};

skeletonCallback.onprogress = function(progress, url) {
    // show progress ...
};

Cal3D.CalLoader.loadCoreSkeletonFromFile('hero.xsf', skeletonCallback);
}}}

Now that the skeleton has been loaded successfully, the animation, meshe and material data can now be loaded in any order. Use Cal3D.CalLoader.loadCoreAnimationFromFile(), Cal3D.CalLoader.loadCoreMeshFromFile() and Cal3D.CalLoader.loadCoreMaterialFromFile() functions to do these. 
{{{
/*
    Animation Data Loading
*/

// assumimg the core skeleton has been loaded successfully and set to the core model

var idleCoreAnimationId, walkCoreAnimationId, limpCoreAnimationId, waveCoreAnimationId;

var animationCallback = {};

animationCallback.onload = function(coreAnimation, url) {
    switch(url) {
    case 'hero_idle.xaf':
        idleCoreAnimationId = myCoreModel.addCoreAnimation(coreAnimation);
        break;
    case 'hero_walk.xaf':
        walkCoreAnimationId = myCoreModel.addCoreAnimation(coreAnimation);
        break;
    case 'hero_limp.xaf':
        limpCoreAnimationId = myCoreModel.addCoreAnimation(coreAnimation);
        break;
    case 'hero_wave.xaf':
        waveCoreAnimationId = myCoreModel.addCoreAnimation(coreAnimation);
        break;
    default:
        break;
    }
};

animationCallback.onerror = function(errorCode, url) {
    // error handling ...
};

animationCallback.onprogress = function(progress, url) {
    // show progress ...
};

// get the core skeleton from the core model
var myCoreSkeleton = myCoreModel.getCoreSkeleton();

Cal3D.CalLoader.loadCoreAnimationFromFile('hero_idle.xaf', myCoreSkeleton, animationCallback);
Cal3D.CalLoader.loadCoreAnimationFromFile('hero_walk.xaf', myCoreSkeleton, animationCallback);
Cal3D.CalLoader.loadCoreAnimationFromFile('hero_limp.xaf', myCoreSkeleton, animationCallback);
Cal3D.CalLoader.loadCoreAnimationFromFile('hero_wave.xaf', myCoreSkeleton, animationCallback);
}}}
{{{
/*
    Mesh Data Loading
*/

var upperBodyCoreMeshId, lowerBodyCoreMeshId, helmetCoreMeshId;

var meshCallback = {};

meshCallback.onload = function(coreMesh, url) {
    switch(url) {
    case 'hero_upperbody.xmf':
        upperBodyCoreMeshId = myCoreModel.addCoreMesh(coreMesh);
        break;
    case 'hero_lowerbody.xmf':
        lowerBodyCoreMeshId = myCoreModel.addCoreMesh(coreMesh);
        break;
    case 'hero_helmet.xmf':
        helmetCoreMeshId = myCoreModel.addCoreMesh(coreMesh);
        break;
    default:
        break;
    }
};

meshCallback.onerror = function(errorCode, url) {
    // error handling ...
};

meshCallback.onprogress = function(progress, url) {
    // show progress ...
};

Cal3D.CalLoader.loadCoreMeshFromFile('hero_upperbody.xmf', meshCallback);
Cal3D.CalLoader.loadCoreMeshFromFile('hero_lowerbody.xmf', meshCallback);
Cal3D.CalLoader.loadCoreMeshFromFile('hero_helmet.xmf', meshCallback);
}}}
{{{
/*
    Material Data Loading
*/

var upperBodyChainmailCoreMaterialId, upperBodyPlatemailCoreMaterialId;
var lowerBodyChainmailCoreMaterialId, lowerBodyPlatemailCoreMaterialId;

var materialCallback = {};

materialCallback.onload = function(coreMaterial, url) {
    switch(url) {
    case 'hero_upperbody_chainmail.xrf':
        upperBodyChainmailCoreMaterialId = myCoreModel.addCoreMaterial(coreMaterial);
        break;
    case 'hero_upperbody_platemail.xrf':
        upperBodyPlatemailCoreMaterialId = myCoreModel.addCoreMaterial(coreMaterial);
        break;
    case 'hero_lowerbody_chainmail.xrf':
        lowerBodyChainmailCoreMaterialId = myCoreModel.addCoreMaterial(coreMaterial);
        break;
    case 'hero_lowerbody_platemail.xrf':
        lowerBodyPlatemailCoreMaterialId = myCoreModel.addCoreMaterial(coreMaterial);
        break;
    default:
        break;
    }
};

materialCallback.onerror = function(errorCode, url) {
    // error handling ...
};

materialCallback.onprogress = function(progress, url) {
    // show progress ...
};

Cal3D.CalLoader.loadCoreMaterialFromFile('hero_upperbody_chainmail.xrf', materialCallback);
Cal3D.CalLoader.loadCoreMaterialFromFile('hero_upperbody_platemail.xrf', materialCallback);
Cal3D.CalLoader.loadCoreMaterialFromFile('hero_lowerbody_chainmail.xrf', materialCallback);
Cal3D.CalLoader.loadCoreMaterialFromFile('hero_lowerbody_platemail.xrf', materialCallback);
}}}

== Material System Setup ==

Depending on the model type and the required functionality, a few additional steps should be done to make the material handling work properly.<br>
Textures are not handled by the Cal3DJS library directly, because of all the different ways they are needed and managed in the applications. However, there is flexible system in place to support the texture handling as much as possible.<br>
In every map of each material there is an identifier stored. This value is written during the exporting process, and is most likely the filename of a texture. The idea is to use this value to load the texture, and reference it afterwards through a user-defined data that can be stored in every core material map at runtime. <br>
Useful functions to get all the core materials of the core model are Cal3D.CalCoreModel.getCoreMaterialCount() and Cal3D.CalCoreModel.getCoreMaterial(). The number of maps in a core material is returned by the Cal3D.CalCoreMaterial.getMapCount() function. Access to the filename of each map is provided through Cal3D.CalCoreMaterial.getMapFilename(). User-data, such as an identifier of the loaded texture, can be stored in the core material map with help of the Cal3D.CalCoreMaterial.setMapUserData() function. It can later be retrieved by calling getUserMapData(). 
{{{
/*
    load all textures and store their as user-data in the corresponding core material map
*/

var onTextureLoad = function(texture, coreMaterial, mapId) {
    // store the texture object as user-data in the core material map
    coreMaterial.setMapUserData(mapId, texture);
};

var materialCount = myCoreModel.getCoreMaterialCount();
for(var materialId=0; materialId<materialCount; materialId++) {
    // get the current core material
    var coreMaterial = coreModel.getCoreMaterial(materialId);

    // loop through all maps of the current core material
    var mapCount = coreMaterial.getMapCount();
    for(var mapId=0; mapId<mapCount; mapId++) {
        // load the texture from file
        var filename = coreMaterial.getMapFilename(mapId);
        var url = filename;    // or myTexturePath + filename

        // the function that is responsible for loading and creating a graphic-API dependent 
        // (canvas, WebGL, etc.) texture object and calls onTextureLoad when done
        myTextureLoadingCreatingFunction(url, coreMaterial, mapId, onTextureLoad);
    }
}
}}}